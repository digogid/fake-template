# @scf-option  {"ignore": "true"}
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: template-hexagonal-python
  title: Hexagonal Python
  description: Create a new Python app, using Hexagonal Architecture
  tags: ["python", "backend", "hexagonal"]
spec:
  owner: pdd-team
  type: service

  parameters:
    - title: Overview
      description: |
        This template will generate a Web Application in **Python** using **Hexagonal Architecture**.
        After the complete execution, including its github action, the following artifacts will be available:
        - Github Repository
          - **Name**: grupoboticario/*{vs-acronym}*-*{system-name}*-*{component-name}*
          - **Description**: Repository with the source code with a single branch named main
        - Github Actions for CI and CD
          - **Name**: Standard
          - **Description**:
            - Standard workflow will contain steps to:
              - continuous integration (CI)
              - infra continuous delivery (infra CD)
              - infra continuous delivery (app CD)
            - CD steps will be available for every environment (dev, hml and prd)
            - All actions will be executed in self hosted runners running in the value stream kubernetes cluster.
        - Environments
          - **Name**: ci, dev, hml and prd
          - **Description**:
            Environments to control Standard workflow execution.
            The environments hml and prd will have protection rule requiring a review from owner team.
        - Elastic Container Register
          - **Name**: *{component-name}*
          - **Description**: The ECR will be created on aws shared account of the value stream. The images registered on this service will be used to publish the component on all environments.
        - Kubernetes Ingress and DNS Configuration (friendly url)
          - **Name**:
            - d{*component-name*}.*{vs-acronym}*.grupoboticario.digital for dev
            - h{*component-name*}.*{vs-acronym}*.grupoboticario.digital for hml
            - *{component-name}*.*{vs-acronym}*.grupoboticario.digital for prd
        - Kubernetes Deploy
        - Sonar Project and Group
          - The Sonar project and the group to grant access for users. The users on Github teams will be used to configure the sonar groups at creation |
        - ArgoCD applications
          - **Name**:
            - *{component-name}*-dev
            - *{component-name}*-dev-infra
            - *{component-name}*-hml
            - *{component-name}*-hml-infra
            - *{component-name}*-prd
            - *{component-name}*-prd-infra
          - **Description**: Applications on ArgoCD to control CD of both infra and application.

  steps:
    - id: sonar
      name: Initialize Sonar
      action: gb-tech:sonar-init
      input:
        component: ${{ parameters.component }}
        domain: ${{ parameters.domain }}
        system: ${{ parameters.system }}
        team: ${{ parameters.team }}

    - id: vars
      name: Load Domain Vars
      action: gb-tech:get-vars
      input:
        parameters: ${{parameters}}
        domain: ${{ parameters.domain }}
        system: ${{ parameters.system }}
        component: ${{ parameters.component }}
        sonarProjectId: ${{ steps.sonar.output.projectId }}
        team: ${{ parameters.team }}
        additionalParameters:
          lifecycle: "experimental"
          hasArgocd: true
          argocdAppSelector: ${{parameters.component}}
          hasNewRelic: true
          newRelicEntityName: ${{parameters.component}}
          appPort: 3000
          configs:
            - name: "NEW_RELIC_CONFIG_FILE"
              value: "./newrelic.ini"
            - name: "PYTHONPATH"
              value: "."
            - name: "PYTHONUNBUFFERED"
              value: "1"
            - name: "PYTHONDONTWRITEBYTECODE"
              value: "1"
            - name: "POETRY_VIRTUALENVS_CREATE"
              value: "false"
            - name: "LOG_LEVEL_ENABLED"
              value: "ERROR"
            - name: "DOCKER_CMD"
              value: "newrelic-admin run-program gunicorn {{ case 'snakeCase' parameters.component}}.asgi -b 0.0.0.0:3000 -k uvicorn.workers.UvicornWorker"

    - id: github-app-token
      name: Get Github App Tokens
      action: gb-tech:get-github-app-token
      input:
        accountLogin: ${{steps.vars.output.github.orgName}}

    - id: scafflater-init
      name: Init code template
      action: gb-tech:scafflater-init
      input:
        repo: "https://github.com/${{steps.vars.output.github.orgName}}/pdd-template-hexagonal-python"
        parameters: ${{steps.vars.output.parameters}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: scafflater-init-github
      name: Configuring Github
      action: gb-tech:scafflater-init
      input:
        repo: "https://github.com/${{steps.vars.output.github.orgName}}/pdd-template-github"
        parameters: ${{steps.vars.output.parameters}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: scafflater-init-backstage
      name: Init Backstage Configuration
      action: gb-tech:scafflater-init
      input:
        repo: "https://github.com/${{steps.vars.output.github.orgName}}/pdd-template-backstage"
        parameters: ${{steps.vars.output.parameters}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: scafflater-catalog-info
      name: Generate "catalog-info.yaml"
      action: gb-tech:scafflater-add-partial
      input:
        templateName: "pdd-template-backstage"
        partial: "catalog:configure"
        parameters: ${{steps.vars.output.parameters}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: scafflater-k8s-deploy
      name: Configuring K8s deploy
      action: gb-tech:scafflater-add-partial
      input:
        templateName: "pdd-template-backstage"
        partial: "k8s:app-deploy"
        parameters: ${{steps.vars.output.parameters}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: scafflater-init-infra
      name: Init Infra
      action: gb-tech:scafflater-init
      input:
        repo: "https://github.com/${{steps.vars.output.github.orgName}}/pdd-template-crossplane-aws"
        parameters: ${{steps.vars.output.parameters}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: scafflater-infra-secrets
      name: Add secret manager
      action: gb-tech:scafflater-add-partial
      input:
        templateName: "pdd-template-crossplane-aws"
        partial: "secrets"
        parameters: ${{steps.vars.output.parameters}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: scafflater-infra-app-role
      name: Add app role
      action: gb-tech:scafflater-add-partial
      input:
        templateName: "pdd-template-crossplane-aws"
        partial: "app-role"
        parameters: ${{steps.vars.output.parameters}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: scafflater-infra
      name: Configuring requested cloud services
      action: gb-tech:infra-scafflater
      input:
        repo: "https://github.com/${{steps.vars.output.github.orgName}}/pdd-template-crossplane-aws"
        parameters: ${{steps.vars.output.parameters}}
        services: ${{parameters.services}}
        config:
          githubUsername: "x-access-token"
          githubPassword: ${{ steps['github-app-token'].output.accessToken }}
          annotate: false

    - id: create-repo
      name: Create repo
      action: gb-tech:initialize-repo
      input:
        owner: ${{steps.vars.output.github.orgName}}
        repo: ${{steps.vars.output.github.repoName}}
        description: ${{parameters.componentDescription}}
        type: "app-backend"
        template: "${{steps.vars.output.github.orgName}}/pdd-template-hexagonal-python"
        domain: ${{parameters.domain}}
        team: ${{parameters.team}}
        committerEmail: ${{parameters.githubUser.email}}
        committerName: ${{parameters.githubUser.displayName}}

    - id: register
      name: Register New System
      action: catalog:register
      input:
        repoContentsUrl: "${{steps.vars.output.github.repoUrl}}/blob/main"
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.vars.output.github.repoUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}